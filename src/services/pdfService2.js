import jsPDF from 'jspdf';

export function generateRoutePDF(routeData) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = margin;

  // Title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Route Plan', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Date and time
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  const now = new Date();
  doc.text(`Generated: ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`, margin, yPosition);
  yPosition += 15;

  // Route summary
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Route Summary', margin, yPosition);
  yPosition += 10;

  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(`Total Distance: ${routeData.totalDistance}`, margin, yPosition);
  yPosition += 8;
  doc.text(`Estimated Duration: ${routeData.totalDuration}`, margin, yPosition);
  yPosition += 8;
  doc.text(`Number of Stops: ${routeData.selectedAddresses.length}`, margin, yPosition);
  yPosition += 15;

  // Starting point
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Starting Point', margin, yPosition);
  yPosition += 10;

  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(`Address: ${routeData.startingPoint.address}`, margin, yPosition);
  yPosition += 15;

  // Route stops
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Route Stops (Optimized Order)', margin, yPosition);
  yPosition += 10;

  // Get the optimized waypoint order from the route
  const waypointOrder = routeData.route.routes[0].waypoint_order || [];
  const orderedAddresses = waypointOrder.map(index => routeData.selectedAddresses[index]);

  orderedAddresses.forEach((address, index) => {
    // Check if we need a new page
    if (yPosition > doc.internal.pageSize.getHeight() - 40) {
      doc.addPage();
      yPosition = margin;
    }

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(`${index + 1}. ${address.businessName}`, margin, yPosition);
    yPosition += 8;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`   ${address.address}`, margin, yPosition);
    yPosition += 6;

    if (address.latitude && address.longitude) {
      doc.text(`   Coordinates: ${address.latitude.toFixed(6)}, ${address.longitude.toFixed(6)}`, margin, yPosition);
      yPosition += 10;
    } else {
      yPosition += 4;
    }
  });

  // Return to starting point
  yPosition += 5;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(`${orderedAddresses.length + 1}. Return to Starting Point`, margin, yPosition);
  yPosition += 8;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`   ${routeData.startingPoint.address}`, margin, yPosition);

  // Footer
  const pageCount = doc.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(
      `Page ${i} of ${pageCount} - Generated by Address Mapping & Route Planner`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }

  // Save the PDF
  const fileName = `route-plan-${now.toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}